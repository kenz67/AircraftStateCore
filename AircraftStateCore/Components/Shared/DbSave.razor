@using AircraftStateCore.Services.Interfaces;
@using BootstrapBlazor.Components;
   
@inject IPlaneData planeData;
@inject ISimConnectService simconnect


<div>
	<Button @onclick="() => Show()" Color="Color.Primary">Save to DB</Button>
	
	<Divider/>

	<Modal @ref="SmallModal">
		<ModalDialog SaveButtonText="Yes" ShowCloseButton="false" ShowSaveButton="false" CloseButtonText="No" CloseButtonIcon="" IsCentered="true" Title="Save Profile">
			<BodyTemplate>				
				<br />
				<AutoComplete Items="@planeData.Profiles" IsLikeMatch="true" IgnoreCase="true" OnValueChanged="SelectProfile" IsSelectAllTextOnFocus="true" />
				<br />
				<div class="modal-footer">
					<Button class="@isDisabled" Color="Color.Success" @onclick="() => SaveProfile()">Save</Button>
					<Button Color="Color.Danger" @onclick="() => Close()">Cancel</Button>
				</div>
			</BodyTemplate>
		</ModalDialog>
	</Modal>
</div>

@code {
	private Modal SmallModal { get; set; }
	private List<SelectedItem> planeList { get; set; } = new List<SelectedItem>();
	private List<String> ProfileList { get; set; }
	private String ProfileName { get; set; }
	private String isDisabled { get; set; } = "disabled";
	protected override void OnInitialized()
	{

	}

	private Task Show()
	{
		SmallModal.Show();
		return Task.CompletedTask;
	}

	public void SaveProfile()
	{
		//planeData.SaveProfile(ProfileName);
		simconnect.SaveDataToDb(ProfileName);
		SmallModal.Close();
	}

	protected async Task SelectProfile(string item)
	{
		ProfileName = item;
		isDisabled = string.IsNullOrEmpty(ProfileName) ? "disabled" : String.Empty;
		await InvokeAsync(StateHasChanged);		
	}


	public void Close()
	{
		SmallModal.Close();
	}
}